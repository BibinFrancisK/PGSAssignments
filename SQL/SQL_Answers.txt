https://www.uvm.edu/~kdk/demobld.sql


1. CREATE TABLE Customer (
	  2  Customerid NUMBER(5),
	  3  CustomerName NUMBER(20),
	  4  Address1 VARCHAR2(20),
	  5  Address2 VARCHAR2(20)
	  6  );
   
2. ALTER TABLE Customer MODIFY CustomerName VARCHAR2(20) NOT NULL;

3. ALTER TABLE Customer ADD(
	  2  Sex VARCHAR2(1),
	  3  Age NUMBER(2),
	  4  PhoneNo NUMBER(10),
	  5  Income NUMBER(10, 2)
	  6  );
	  
4. INSERT INTO Customer VALUES(1001, 'Allan', '#115 Chicago','#115 Chicago', 'M', 25, 7878776, 10000);
   INSERT INTO Customer VALUES(1002, 'George', '#116 France','#116 France', 'M', 25, 434524, 20000);
   INSERT INTO Customer VALUES(1003, 'Becker', '#114 New York','#114 New York', 'M', 45, 431525, 15000.50);

5. ALTER TABLE Customer MODIFY CustomerId NUMBER(5) CONSTRAINT Custid_Prim PRIMARY KEY;

6. INSERT INTO Customer VALUES(1002, 'John', '#114 Chicago','#114 Chicago', 'M', 45, 431525, 19000.00);
	ERROR at line 1:
	ORA-00001: unique constraint (SYS.CUSTID_PRIM) violated

7.  ALTER TABLE Customer DROP CONSTRAINT Custid_Prim;
	INSERT INTO Customer VALUES(1002, 'Becker', '#114 New York','#114 New York', 'M', 45, 431525, 15000.50);
	INSERT INTO Customer VALUES(1003, 'Nanapatekar', '#115 India','#114 New York', 'M', 45, 431525, 20000.50);

8. TRUNCATE TABLE Customer;

9. ALTER TABLE Customer RENAME COLUMN Income TO Grossincome;

10. CREATE TABLE Suppliers
	  2  (
	  3  SupplID NUMBER(5),
	  4  SName VARCHAR2(20) NOT NULL,
	  5  Addr1 VARCHAR2(20),
	  6  Addr2 VARCHAR2(20),
	  7  Contactno number (10)
	  8  );

11. CREATE TABLE Transactions
	  2  (
	  3  CustomerID NUMBER(5),
	  4  CustomerName VARCHAR2(10),
	  5  Debit NUMBER(10,2),
	  6  Credit NUMBER(10,2),
	  7  Balance NUMBER(10,2) NOT NULL,
	  8  TransactionDate DATE
	  9  );

	INSERT INTO Transactions VALUES (1000, 'Allen', 3000, 2000, 1000, '10 Oct 92');
	INSERT INTO Transactions VALUES (1001, 'George', 6000, 2000, 4000, '08 Oct 92');
	INSERT INTO Transactions VALUES (1002, 'Becker', 10000, 2000, 8000, '04 Nov 92');
	INSERT INTO Transactions VALUES (1003, 'Bob', 20000, 2000, 280000, '4 Oct 92');

12. ALTER TABLE Transactions ADD CONSTRAINT credit_chk CHECK (Credit <= (Debit + Balance));

13. ALTER TABLE Transactions ADD CONSTRAINT Balan_Check CHECK (Balance > 500);

14.CREATE VIEW Trans_View AS
	  2  SELECT
	  3  CustomerId AS accountId,
	  4  CustomerName AS AccountHolderName,
	  5  Debit,
	  6  Credit,
	  7  Balance
	  8  FROM Transactions;  
	  
15. SELECT dname FROM dept WHERE deptno = 
		(SELECT deptno FROM emp WHERE sal = 
				(SELECT MAX(sal) FROM emp));

16. CREATE SEQUENCE Seq_Dept
		INCREMENT BY 10
		START WITH 40
		MAXVALUE 200;
		
17. INSERT INTO Dept VALUES (Seq_Dept.NEXTVAL, 'New Dep 1', 'Loc A'); 
	INSERT INTO Dept VALUES (Seq_Dept.NEXTVAL, 'New Dep 2', 'Loc B'); 
	INSERT INTO Dept VALUES (Seq_Dept.NEXTVAL, 'New Dep 3', 'Loc C'); 

18. SELECT Ename, Sal, Comm, Deptno 
		FROM emp 
			WHERE deptno IN (20, 30, 40);

19. SELECT Empno AS EmployeeNumber, Ename AS EmployeeName, 
		Job AS Job, Mgr AS Manager, Hiredate AS HiredDate,
			Sal AS Salary, Comm AS Commission, Deptno AS DepartmentNumber
				FROM emp;

20. SELECT d.Dname, d.Loc, COUNT(*)  AS NumberOfPeople, AVG(e.sal) AS 	AverageSalary FROM Dept d
		JOIN Emp e ON d.deptno = e.deptno
			GROUP BY (d.dname, d.Loc);


21. SELECT * FROM emp
		WHERE Job IN ('CLERK', 'SALESMAN');
		
22. SELECT  empno, ename, deptno, TRUNC(MONTHS_BETWEEN(sysdate,hiredate)/12) exp FROM emp 
		WHERE TRUNC(MONTHS_BETWEEN(sysdate,hiredate)/12) > 18;


23. SELECT Ename, Job FROM emp
		WHERE Hiredate < '01-Jan-82';
		
24. SELECT ename, job, sal*120 AS TenYrSal FROM emp
		WHERE deptno IN (10,20);
		
		
25. SELECT ename, TRUNC(MONTHS_BETWEEN(sysdate,hiredate)/12) exp FROM emp WHERE job = 'CLERK';

26. SELECT * FROM dept WHERE loc = 'BOSTON';		
		
27. SELECT ename, sal FROM emp WHERE sal BETWEEN 1000 and 3000
			ORDER BY sal, ename;
		
28. SELECT * FROM emp WHERE mgr IS NULL;		
		
29. SELECT * FROM emp WHERE job IN ('CLERK', 'ANALYST') AND
			sal NOT IN (2500, 3500, 7000);
		
30. SELECT ename, sal, 12*sal AS AnnSal FROM emp 
		WHERE 12*sal > 20000 ORDER BY 12*sal;		
		
31. SELECT ename, TRUNC(MONTHS_BETWEEN(sysdate,hiredate)/12) AS exp FROM emp;

32. SELECT * FROM emp WHERE ename LIKE 'A%S';		

33. SELECT ename, job FROM emp 
		WHERE ename LIKE '_N%[NS]' OR ename LIKE '__N%[NS]';


34. SELECT ename FROM emp 
		WHERE hiredate BETWEEN '01-JAN-1982' AND '31-DEC-1982';


35. ************************************************ 

36. SELECT * FROM emp
		WHERE hiredate LIKE '%DEC%';


37. SELECT ename, TRUNC(MONTHS_BETWEEN(sysdate,hiredate)/12) AS exp, NVL2(comm, comm, 0) AS comm FROM emp WHERE job = 'PRESIDENT';


38. SELECT ename, hiredate from emp 
		WHERE EXTRACT(DAY FROM hiredate) <= 15;

39. SELECT ename, sal, sal/1000 AS thousands FROM emp;

40. SELECT ename, hiredate, TO_CHAR(hiredate, 'DAY') hireday FROM emp;

41. ************************************************ 

42. SELECT MAX(sal) max_sal, MIN(sal) min_sal, SUM(sal) tot_sal, ROUND(AVG(sal)) avg_sal FROM emp;

43. SELECT job, MAX(sal), MIN(sal), SUM(sal), AVG(sal) FROM emp GROUP BY job;

44. SELECT job, COUNT(*) Tot_Emp FROM emp GROUP BY job;

45. SELECT COUNT(*) No_of_Mgrs FROM emp WHERE job = 'MANAGER';

46. SELECT (MAX(sal) - MIN(sal)) Difference FROM emp;

47. SELECT mgr, min(sal) FROM emp GROUP BY mgr HAVING min(sal) >= 2000;

48. SELECT e.ename, e.job, e.deptno FROM emp e
		JOIN dept d ON e.deptno = d.deptno
			WHERE job IN (SELECT job from emp WHERE deptno = 20)
				ORDER BY e.deptno;

49. SELECT mgr, MIN(sal) FROM emp GROUP BY mgr ORDER BY MIN(sal);
		
50. SELECT ename, sal FROM emp ORDER BY sal FETCH FIRST 3 ROWS ONLY;

51. SELECT ename, job FROM emp WHERE deptno IN (SELECT deptno FROM dept WHERE loc <> 'CHICAGO');

52. SELECT e.ename, d.dname FROM emp e
		JOIN dept d ON (e.deptno = d.deptno)
		WHERE e.deptno IN (
		SELECT deptno FROM emp HAVING COUNT(ename) >= 3 GROUP BY deptno);


53. SELECT ename, deptno FROM emp WHERE deptno = (
		SELECT deptno FROM (
			SELECT SUM(sal) sum_sal, deptno FROM emp 
			GROUP BY deptno ORDER BY sum_sal DESC
			FETCH FIRST 1 ROW ONLY));

54. SELECT ename, deptno FROM emp WHERE sal IN(
		SELECT MAX(sal) FROM emp
		GROUP BY deptno);
	
	
		
####################################################
PL/ SQL

1. 
declare
	num1 number := &num1;
	num2 number := &num2;
	sum number;
	diff number;
	pdt number;
	quo number;
begin
	sum:=num1+num2;
	diff:=num1-num2;
	pdt:=num1*num2;
	quo:=num1/num2;
	dbms_output.put_line('Sum:' ||sum|| ' Diff:' || diff);
	dbms_output.put_line('Pdt: ' ||pdt|| ' Quo: '|| quo);
end;

2. 
	declare
		v_empno number := &eno;
		v_sal number;
		v_grade salgrade.grade%type;
	begin
		select sal into v_sal from emp where empno = v_empno;
		select grade into v_grade from salgrade where v_sal between losal and hisal;
		dbms_output.put_line('Grade of employee: ' || v_grade);
	end;
	
3. 
	declare
		v_empname varchar2(30) := '&emname';
		nRecordEmp emp%rowtype;
		nRecordDept dept%rowtype;
	begin
		select * into nRecordEmp from emp where ename = v_empname;
		select * into nRecordDept from dept where nRecordEmp.deptno = deptno;
		dbms_output.put_line('Empno: ' || nRecordEmp.empno || ' Name: ' || nRecordEmp.ename || ' Job: ' || nRecordEmp.job || ' Deptname: ' || nRecordDept.dname);
	end;


4. 
	declare
		nRecord dept%rowtype;
	begin
		select * into nRecord from dept where deptno=10;
		dbms_output.put_line('Deptno: ' || nRecord.deptno || ' Name: ' || nRecord.dname || ' Loc: ' ||  nRecord.loc);
	end;
		

5.
	declare
		v_count number;
	begin
		select count(*) into v_count from emp where hiredate between '01-JAN-80' and '01-DEC-81';
		dbms_output.put_line('No. of employees: ' || v_count);
	end;
	
6. 
	declare
		v_deptno emp.deptno%type := &dpno;
		v_ename emp.ename%type;
		v_job emp.job%type;
		cursor e_cursor is 
			select ename, job from emp where deptno = v_deptno;	
	begin
		open e_cursor;
		loop
		 fetch e_cursor into v_ename, v_job;
		 exit when e_cursor%notfound;
		 dbms_output.put_line('Name: ' ||v_ename || ' Job: ' || v_job);
		end loop;
		close e_cursor;
	end;
		
7.
	declare
	v_ename emp.ename%type;
	cursor e_cursor is
		select ename from emp where deptno=(select deptno from dept where loc='CHICAGO');	
	begin
		open e_cursor;
		loop
			fetch e_cursor into v_ename;
			exit when e_cursor%notfound;
			dbms_output.put_line(v_ename);
		end loop;
		close e_cursor;
	end;
	
8.
	declare
	nRecordEmp emp%rowtype;
	cursor e_cursor is
		select * from emp;
	begin
		open e_cursor;
		loop
			fetch e_cursor into nRecordEmp;
			exit when e_cursor%notfound;
			dbms_output.put_line('Empno: '|| nRecordEmp.empno || ' Name: ' || nRecordEmp.ename || ' Job: ' || nRecordEmp.job);
		end loop;
		close e_cursor;
	end;
		

9. 
	declare
	nRecordEmp emp%rowtype;
	ex_no_record_found exception;
	pragma exception_init(ex_no_record_found, -20001);
	cursor e_cursor is
		select * from emp where deptno=(select deptno from dept where loc='BOSTON');
	begin	
		open e_cursor;
		if e_cursor%rowcount = 0 then raise ex_no_record_found;
		end if;
		loop
			fetch e_cursor into nRecordEmp;
			exit when e_cursor%notfound;
			dbms_output.put_line('Empno: '|| nRecordEmp.empno || ' Name: ' || nRecordEmp.ename || ' Job: ' || nRecordEmp.job);
		end loop;
		close e_cursor;
	exception
		when ex_no_record_found then dbms_output.put_line('No record found');
	end;

10. ******************

11. declare
	v_ename emp.ename%type;
	v_sal emp.sal%type;
	v_deptno emp.deptno%type;
	cursor e_cursor is 		
		select ename, sal, deptno from emp where sal in (select max(sal) from emp group by deptno);
	begin
		open e_cursor;
		loop
			fetch e_cursor into v_ename, v_sal, v_deptno;
			exit when e_cursor%notfound;
			dbms_output.put_line('Empname: '|| v_ename || ' Sal: ' || v_sal || ' Deptno: ' || v_deptno);
		end loop;
		close e_cursor;
	end;
	
 
12. 
	declare
	nRecordEmp emp%rowtype;
	cursor e_cursor is
		select * from emp;
	begin
		open e_cursor;
		dbms_output.put_line('Empname '||'--'||' Comm ');
		loop
		fetch e_cursor into nRecordEmp;
		exit when e_cursor%notfound;
		if nRecordEmp.comm is not null then
			dbms_output.put_line(nRecordEmp.ename || '--' || nRecordEmp.comm);
		else
			dbms_output.put_line(nRecordEmp.ename || '--' ||'Commission is NULL');
		end if;
		end loop;
		close e_cursor;
	end;	
 

13.
	declare
	cursor e_cursor is
		select e.ename ename, m.ename mname from emp e
		join emp m on e.mgr = m.empno;
	nRecordEmp e_cursor%rowtype;
	v_ename nRecordEmp.ename%type;
	v_mname nRecordEmp.mname%type;		
	begin
		dbms_output.put_line('Empname '||' -- '||' Manager ');
		open e_cursor;
		loop
		fetch e_cursor into v_ename, v_mname;	
		exit when e_cursor%notfound;
		dbms_output.put_line(v_ename || ' -- ' || v_mname);
		end loop;
		close e_cursor;
	end;
	
14.
	declare
	nRecordEmp emp%rowtype;
	ex_comm_null exception;
	pragma exception_init(ex_comm_null, -20002);
	cursor e_cursor is
		select * from emp where empno = 7369;
	begin
		open e_cursor;
		dbms_output.put_line('Empname '||'--'||' Comm ');
		loop
		fetch e_cursor into nRecordEmp;
		exit when e_cursor%notfound;
		if nRecordEmp.comm is not null then
			dbms_output.put_line(nRecordEmp.ename || '--' || nRecordEmp.comm);
		else
			raise ex_comm_null;
		end if;
		end loop;
		close e_cursor;
	exception
		when ex_comm_null then dbms_output.put_line('Commission is NULL');
	end;	
	
	
15. *****************************************
 
16. 
	create or replace procedure dept_details as
	nRecordDept dept%rowtype;
	cursor d_cursor is
	  select * from dept;
	begin
		dbms_output.put_line('Deptno '||'--'||' Deptname '||'--'||'Loc');
		open d_cursor;
		loop
		fetch d_cursor into nRecordDept;
		exit when d_cursor%notfound;
		dbms_output.put_line(nRecordDept.deptno || '--' || nRecordDept.dname ||'--' || nRecordDept.loc);
		end loop;
		close d_cursor;
	end dept_details;
	
 
17.
	create or replace procedure emp_from_deptno(d_no IN number) as
	cursor e_cursor is
		select ename, deptno from emp where deptno = d_no;
	nRecordEmp e_cursor%rowtype;
	begin
		dbms_output.put_line('Empname '||'--'|| 'Deptnum');
		open e_cursor;
		loop
		fetch e_cursor into nRecordEmp;
		exit when e_cursor%notfound;
		dbms_output.put_line(nRecordEmp.ename ||' -- '||nRecordEmp.deptno);
		end loop;
		close e_cursor;
	end emp_from_deptno;


18.
	create or replace procedure max_sal_emp_job as
	cursor c_cursor is
		select * from emp where sal in
		(select max_sal from
			(select max(sal) max_sal, job from emp group by job));
	nRecord c_cursor%rowtype;
	begin
		dbms_output.put_line('Empno' ||'--'||'Ename'||'--'|| 'Job'||'--'|| 'Mgr' ||'--'||'Hiredate' ||'--'||'Sal' ||'--'||'Comm'||'--'|| 'Deptno');
		open c_cursor;
		loop
		fetch c_cursor into nRecord;
		exit when c_cursor%notfound;
		dbms_output.put_line(nRecord.empno||'--'|| nRecord.ename||'--'|| nRecord.job||'--'|| nRecord.mgr||'--'|| nRecord.hiredate ||'--'||nRecord.sal ||'--'||nRecord.comm ||'--'||nRecord.deptno);
		end loop;
		close c_cursor;
	end max_sal_emp_job;
		
	
	
19.
	create or replace procedure find_ann_sal as
	cursor c_cursor is
		select ename, 12*sal ann_sal from emp;
	nRecord c_cursor%rowtype;
	begin
		dbms_output.put_line('Ename'||'--'||'Annual Salary');
		open c_cursor;
		loop
		fetch c_cursor into nRecord;
		exit when c_cursor%notfound;
		dbms_output.put_line(nRecord.ename || '--' || nRecord.ann_sal);
		end loop;
		close c_cursor;
	end find_ann_sal;
	
	
20.
	create or replace function find_mgr(emp_name varchar2)
	return varchar2 as
	v_emp_name emp.ename%type;
	v_mgr_name emp.ename%type;
	begin
			select e.ename ename, m.ename mname into v_emp_name, v_mgr_name from emp e
			join emp m on e.mgr =  m.empno
			where e.ename = emp_name;	
			return v_mgr_name;
	end find_mgr;

	
	variable mgr_name varchar2(10);
	execute :mgr_name := find_mgr('SCOTT');
	print mgr_name;

	 
 
21. **************************************************

22. 

alter table dept add sal number(10);
 
create or replace trigger calc_salary
	after insert or update or delete 
	of  sal on emp
	for each row
	when (new.empno > 0)
	begin
		update dept set sal = sal + new.sal where deptno = new.deptno;
	end;
 /*NEED TO CROSS-CHECK. THIS MIGHT BE WRONG*/
 
 
23.
	create or replace trigger prev_empno_mod
	before insert or update of empno on emp
	for each row
	begin
		if: new.empno >=0 then
		raise_application_error(-20004, 'Cannot change employee number');
		else 
		raise_application_error(-20005, 'Cannot change employee number');
		end if;
	end;
 
 /*NEED TO CROSS-CHECK. THIS MIGHT BE WRONG*/
 
 
 
 
 
 
 
 
 
 

########################
Notes:
SQL> SELECT tname FROM tab;

TRANS_VIEW
DEPT
EMP
BONUS
SALGRADE
DUMMY

set pagesize 100
set linesize 100
set serveroutput on

TNS: Transfer Network Subscript
tnsnames.ora contains hostname, prt_number, SID etc.
